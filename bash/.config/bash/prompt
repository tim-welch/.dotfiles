#!/usr/bin/bash

# Original:  https://gist.github.com/miki725/9783474
# Changed by Tim

#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch of the current git/mercurial repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/31967

# The various escape codes that we can use to color our prompt.
RED="\[\033[0;31m\]"
YELLOW="\[\033[1;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[1;34m\]"
PURPLE="\[\033[0;35m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

# Symbols
SYMBOL_GIT_BRANCH=${SYMBOL_GIT_BRANCH:-⑂}
SYMBOL_GIT_MODIFIED=${SYMBOL_GIT_MODIFIED:-*}
SYMBOL_GIT_PUSH=${SYMBOL_GIT_PUSH:-↑}
SYMBOL_GIT_PULL=${SYMBOL_GIT_PULL:-↓}

# determine git branch name
function parse_git_info(){
    # get current branch name
    local ref=$(git symbolic-ref --short HEAD 2>/dev/null)
    [ "$ref" = "" ] && ref=$(git rev-parse --short HEAD 2>/dev/null)
    [ "${ref}" = "" ] && return  # not a git repo

    # prepend branch symbol
    ref=$SYMBOL_GIT_BRANCH$ref

    local marks

    # scan first two lines of output from `git status`
    while IFS= read -r line; do
        if [[ $line =~ ^## ]]; then # header line
            [[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
            [[ $line =~ behind\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
        else # branch is modified if output contains more lines after the header line
            marks="$SYMBOL_GIT_MODIFIED$marks"
            break
        fi
    done < <(git status --porcelain --branch 2>/dev/null)  # note the space between the two <

    # print the git branch segment without a trailing newline
    printf " ($ref$marks)"
    unset ref
}

# Determine the branch/state information for this git repository.
function set_git_branch() {
    # Get the name of the branch.
    branch=$(parse_git_info)

    # Set the final branch string.
    BRANCH="${PURPLE}${branch}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
    PROMPT_SYMBOL="\$"
    else
    PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
    fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
    if test -z "$VIRTUAL_ENV" ; then
    PYTHON_VIRTUALENV=""
    else
    PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
    fi
}

# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Set the PYTHON_VIRTUALENV variable.
    set_virtualenv

    # Set the BRANCH variable.
    set_git_branch

    # Set the bash prompt variable.
    PS1="
${PYTHON_VIRTUALENV}${GREEN}\u@\h${COLOR_NONE}:${YELLOW}\w${COLOR_NONE}${BRANCH}
${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
