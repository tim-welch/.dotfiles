#!/usr/bin/bash

# Original:  https://github.com/riobard/bash-powerline
# Changed by Tim

function timer_start {
    timer=${timer:-$SECONDS}
}

function timer_stop {
    timer_show=$(($SECONDS - $timer))
    unset timer
}

trap 'timer_start' DEBUG

__prompt() {
    # Colors
    COLOR_RESET='\[\033[m\]'
    COLOR_CWD=${COLOR_CWD:-'\[\033[0;34m\]'} # blue
    COLOR_GIT=${COLOR_GIT:-'\[\033[0;33m\]'} # brown
    COLOR_USER=${COLOR_USER:-'\[\033[0;36m\]'} # cyan
    COLOR_HOST=${COLOR_HOST:-'\[\033[0;36m\]'} # cyan
    COLOR_TIMER=${COLOR_TIMER:-'\[\033[0;32m\]'} # green
    COLOR_SUCCESS=${COLOR_SUCCESS:-'\[\033[0;32m\]'} # green
    COLOR_FAILURE=${COLOR_FAILURE:-'\[\033[0;31m\]'} # red

    # Symbols
    SYMBOL_GIT_BRANCH=${SYMBOL_GIT_BRANCH:-â‘‚}
    SYMBOL_GIT_MODIFIED=${SYMBOL_GIT_MODIFIED:-*}
    SYMBOL_GIT_PUSH=${SYMBOL_GIT_PUSH:-â†‘}
    SYMBOL_GIT_PULL=${SYMBOL_GIT_PULL:-â†“}

    #PS_SYMBOL='ðŸ—½>'
    PS_SYMBOL='\n>'

    __git_info() { 
        # get current branch name
        local ref=$(git symbolic-ref --short HEAD 2>/dev/null)
        [ "$ref" = "" ] && ref=$(git rev-parse --short HEAD 2>/dev/null)
        [ "${ref}" = "" ] && return  # not a git repo

        # prepend branch symbol
        ref=$SYMBOL_GIT_BRANCH$ref

        local marks

        # scan first two lines of output from `git status`
        while IFS= read -r line; do
            if [[ $line =~ ^## ]]; then # header line
                [[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
                [[ $line =~ behind\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
            else # branch is modified if output contains more lines after the header line
                marks="$SYMBOL_GIT_MODIFIED$marks"
                break
            fi
        done < <(git status --porcelain --branch 2>/dev/null)  # note the space between the two <

        # print the git branch segment without a trailing newline
        printf "$ref$marks"
        unset ref
    }

    ps1() {
        timer_stop

        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $? -eq 0 ]; then
            local symbol="$COLOR_SUCCESS $PS_SYMBOL $COLOR_RESET"
        else
            local symbol="$COLOR_FAILURE $PS_SYMBOL $COLOR_RESET"
        fi

        local cwd="$COLOR_CWD\w$COLOR_RESET"
        local userhost="$COLOR_USER[\u$COLOR_HOST@\h]$COLOR_RESET"
        local timer="$COLOR_TIMER[last: ${timer_show}s]$COLOR_RESET"
        # Bash by default expands the content of PS1 unless promptvars is disabled.
        # We must use another layer of reference to prevent expanding any user
        # provided strings, which would cause security issues.
        # POC: https://github.com/njhartwell/pw3nage
        # Related fix in git-bash: https://github.com/git/git/blob/9d77b0405ce6b471cb5ce3a904368fc25e55643d/contrib/completion/git-prompt.sh#L324
        if shopt -q promptvars; then
            __prompt_git_info="$(__git_info)"
            local git="$COLOR_GIT[\${__prompt_git_info}]$COLOR_RESET"
        else
            # promptvars is disabled. Avoid creating unnecessary env var.
            local git="$COLOR_GIT[$(__git_info)]$COLOR_RESET"
        fi

        PS1="$timer$userhost$git $cwd$symbol"
    }

    PROMPT_COMMAND="ps1${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
}

__prompt
unset __prompt
